#user  nobody;
worker_processes  1; #开启工作进程个数,另外还有一个master进程

#error_log  logs/error.log;	#错误日志文件地址
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024; #工作进程的最大连接数
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;	#长连接超时

    #gzip  on;

    server { #一个http块中, 可以配置多个server块
        listen       80;#监听80端口
        server_name  localhost;#监听访问域名

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

		#iphash:每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题.
		#避免两种情况:1.nginx不作为最前的反向代理 2.nginx后续还有其他的负载均衡服务器
		upstream hash_tomcats {
			ip_hash;
			server 192.168.0.14:88;
			server 192.168.0.15:80;
		}
		#负载均衡，有3台服务器，默认就是轮询,weight是权重,down是不启用
		upstream tomcats {
			server 192.168.163.10:8080 weight=3;
			server 192.168.163.10:8090 weight=1;
			server 192.168.163.10:8100 down;
		}
        location / {
		#匹配项目名,/是最低优先级的,所有没匹配上的,最后就找它
            proxy_pass http://127.0.0.1:8090;
		    #proxy_pass http://tomcats;#使用集群
		    proxy_connect_timeout 600;#和服务器连接超时设置
		    proxy_read_timeout 600;#服务器响应超时
			proxy_send_timeout 600;#服务器发送数据超时
        }

		#匹配优先级
		#=/uri 精确匹配,完全匹配上才生效
		#^~/uri 前缀匹配,正则之前
		#~ pattern 正则匹配(区分大小写),按照文件中的先后顺序正则匹配
		#~* pattern 正则,部分大小写
		#~.img$ 后缀匹配
		#/uri 前缀匹配,但优先级在正则之后
		#/	通用匹配,优先级最低,匹配不到的时候,都找它
		
        #error_page  404              /404.html;#资源找不到页面

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;#错误页面
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
